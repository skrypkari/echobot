const { bot, getChatMemberStatus, sendTextMessage, sendMessageWithImage } = require('../services/telegramService');
const { getUser, createUser, getUsersWithBalanceGreaterThan, updateUserBalance } = require('../services/userService');
const { getWallet, createWallet, getBTCPrice, checkForDeposits, checkForDeposit, isValidTronAddress } = require('../services/walletService');
const { createTransaction, getHistory } = require('../services/historyService');
const { getTransactionsByPeriod } = require('../services/transactionService');
const { createPromo, sendPendingWithdraw } = require('../services/adminService');
const User = require('../models/user');
const Wallet = require('../models/wallet');
const History = require('../models/history');
const Transaction = require('../models/transactions');
const Promocode = require('../models/promocode')
const tronWeb = require('../config/tronWeb');
const dayjs = require('dayjs');
const history = require('../models/history');

const channelUsername = '@echoai_news';

// Generate a new USDT wallet
async function generateUSDTWallet() {
  const account = await tronWeb.createAccount();
  const address = account.address.base58;
  const privateKey = account.privateKey;
  return { address, privateKey };
}

// Wait for a random time between min and max minutes
function waitRandomTime(minMinutes, maxMinutes) {
  const minMs = minMinutes * 60 * 1000;
  const maxMs = maxMinutes * 60 * 1000;
  const randomTime = Math.random() * (maxMs - minMs) + minMs;
  return new Promise(resolve => setTimeout(resolve, randomTime));
}

// Menu buttons configuration
const menuButtons = [
  ['üìà –¢—Ä–µ–π–¥–∏–Ω–≥', 'üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', '‚ùì FAQ'],
  ['üì¢ –ù–∞—à –∫–∞–Ω–∞–ª', 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥'],
  ['üÜò –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞']
];

const menuKeyboard = {
  reply_markup: JSON.stringify({
    keyboard: menuButtons,
    resize_keyboard: true,
    one_time_keyboard: true
  })
};

// Start command handler
bot.onText(/\/start(?: (r[\w\d]+))?/, async (msg, match) => {
  const chatId = msg.chat.id;
  const username = msg.from.username;
  const input = match.input;
  const referralCode = match[1] || input.split(' ')[1];

  try {
    let user = await User.findOne({ telegramId: chatId });

    if (!user) {
      user = await createUser(chatId, username, chatId, chatId);

      const { address, privateKey } = await generateUSDTWallet();
      const wallet = await createWallet(chatId, address, privateKey);
      await wallet.save();

      if (referralCode) {
        const referringUser = await User.findOne({ referralCode });
        if (referringUser) {
          const bonusImg = './assets/bonus.png'
          sendMessageWithImage(referringUser.telegramId, `‚úÖ –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –¥—Ä—É–≥–∞.\n\nüéÅ –í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <strong>5 USDT</strong>`, bonusImg);
          referringUser.referrals.push(chatId);
          referringUser.balance += 5;
          await referringUser.save();
        }
      }

      sendTextMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω. üöÄ', menuKeyboard);
    } else {
      sendTextMessage(chatId, '–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. üöÄ', menuKeyboard);
    }
  } catch (error) {
    console.error('Error checking user:', error);
    sendTextMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }

  const welcomeMessage = `
üéâ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º! –í—Å—ë –≥–æ—Ç–æ–≤–æ –¥–ª—è –Ω–∞—á–∞–ª–∞! üéâ

–≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–π–¥–∏–Ω–≥–æ–≤—ã–π –±–æ—Ç –≤ –ú–æ–ª–¥–æ–≤–µ! üá≤üá©

–ü—Ä–µ–∂–¥–µ —á–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å, –Ω–∞—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞.

–ú–µ–Ω—é:

üìà "–¢—Ä–µ–π–¥–∏–Ω–≥" - –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–æ—Ç–∞ –∑–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –≤—Ä–µ–º–µ–Ω–∏. –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞;

‚è∏Ô∏è "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–π–¥–∏–Ω–≥ / –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–π–¥–∏–Ω–≥" - –∑–∞–ø—É—Å–∫ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞;

üìä "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞" - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –±–æ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: 24 —á–∞—Å–∞, 7 –¥–Ω–µ–π, 1 –º–µ—Å—è—Ü;

üì¢ "–ù–∞—à –∫–∞–Ω–∞–ª" - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –±–æ—Ç–∞.

üíº "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç" - –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –∏ –∞–∫–∫–∞—É–Ω—Ç–µ. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ/–≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞;

üí≥ "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ USDT TRC20 –¥–ª—è –Ω–∞—á–∞–ª–∞ (–∫–æ–º–∏—Å—Å–∏—è 10%);

üí∏ "–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤" - –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–≤–µ—Å—Ç–∏ USDT TRC20 –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ (–∫–æ–º–∏—Å—Å–∏—è 10%);

üìú "–ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞" - –¥–µ–ø–æ–∑–∏—Ç—ã –∏ –≤—ã–≤–æ–¥—ã –Ω–∞ –≤–∞—à–µ–º —Ç–æ—Ä–≥–æ–≤–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ;

üîó "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞" - –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ $5 –æ—Ç –∫–∞–∂–¥–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

‚ùì "FAQ" - –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.

üéÅ "–ü—Ä–æ–º–æ–∫–æ–¥" - –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞.

üõ†Ô∏è "–ü–æ–¥–¥–µ—Ä–∂–∫–∞" - –æ–Ω–ª–∞–π–Ω –ø–æ–º–æ—â—å –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º (—Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ 2 —á–∞—Å–∞, —Ç–æ–ª—å–∫–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º).
  `;

  sendTextMessage(chatId, welcomeMessage, menuKeyboard);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ–º–æ–∫–æ–¥–∞
bot.onText(/\/promocode (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  const code = match[1];
  console.log('match:', match, match[1])

  try {
    const user = await getUser(chatId);
    if (!user) {
      return sendTextMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –∏—Å–ø–æ–ª—å–∑—É—è /start');
    }

    const promocode = await Promocode.findOne({ code: code, isActive: true });
    if (!promocode) {
      return sendTextMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.');
    }

    user.balance += promocode.bonus;
    await user.save();

    promocode.isActive = false;
    await promocode.save();

    sendTextMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ <b>${promocode.bonus} USDT</b>.`);
  } catch (error) {
    console.error('Error processing promocode:', error);
    sendTextMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// create promo
bot.onText(/\/createpromo (.+)/, async (msg, match) => {
  const chatId = msg.chat.id;
  try {
    const user = await getUser(chatId);
    const params = match[1].split(' ');
    const code = params[0];
    const balance = params[1];

    if (user && user.role === 'admin') {
      createPromo(code, balance);
      sendTextMessage(chatId, '‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω')
    }
  } catch (error) {
    console.error('Error processing promocode:', error);
    sendTextMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
  }
});

// Message handler
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const message = msg.text;
  const user = await getUser(chatId);

  if (user.waitingForWithdrawAmount) {
    const withdrawAmount = parseFloat(text);
    if (isNaN(withdrawAmount) || withdrawAmount <= 0) {
      sendTextMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞.');
    } else if (withdrawAmount > user.balance) {
      sendTextMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance} USDT.`);
    } else {
      user.withdrawAmount = withdrawAmount;
      user.waitingForWithdrawAmount = false;
      user.waitingForWalletAddress = true;
      await user.save();
      sendTextMessage(chatId, 'üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ USDT TRC20:');
    }
  } else if (user.waitingForWalletAddress) {
    const walletAddress = text.trim();
    if (!walletAddress || !isValidTronAddress(walletAddress)) { // –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–∞ Tron
      sendTextMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT TRC20.');
    } else {
      await sendPendingWithdraw(chatId, user.withdrawAmount, walletAddress);
      user.waitingForWalletAddress = false;
      user.withdrawAmount = null;
      await user.save();
      sendTextMessage(chatId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.\n\nüßë‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞: @echoai_support');
    }
  }

  switch (message) {
    case 'üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
      try {
        const status = await getChatMemberStatus(chatId, channelUsername);
        if (status === 'member' || status === 'administrator' || status === 'creator') {
          if (user) {
            const userWithdraw = await History.find({ telegramId: user.telegramId });
            let withdraw = 0;
            if (userWithdraw) {
              withdraw = userWithdraw.reduce((acc, balance) => {
                if (balance.method === 'withdraw') {
                  acc += balance.amount;
                }
                return acc;
              }, 0);
            }
            const menuImg = './assets/menu.png';
            const keyboard = {
              reply_markup: JSON.stringify({
                inline_keyboard: [
                  [{ text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å üí∞', callback_data: 'deposit' }],
                  [{ text: 'üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ üí∏', callback_data: 'withdraw' }],
                  [{ text: '‚åõ –ò—Å—Ç–æ—Ä–∏—è –±–∞–ª–∞–Ω—Å–∞ ‚åõ', callback_data: 'balanceHistory' }],
                  [{ text: 'üë§ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üë§', callback_data: 'referral' }],
                ]
              })
            };
            sendMessageWithImage(chatId, `üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <strong>${user.balance.toFixed(2)} USDT</strong>\n\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <strong>${user.date}</strong>\n\nüí∏ –í—Å–µ–≥–æ –≤—ã–≤–µ–¥–µ–Ω–æ: <strong>${withdraw} USDT</strong>\n\nüÜî ID –∫–∞–±–∏–Ω–µ—Ç–∞: <strong>${user.accountId}</strong>`, menuImg, keyboard);
          } else {
            sendTextMessage(chatId, `üî∑ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: ${channelUsername}`);
          }
        } else {
          sendTextMessage(chatId, `üî∑ –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: ${channelUsername}`);
        }
      } catch (error) {
        sendTextMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.');
      }
      break;
    case '‚ùì FAQ':
      const faqKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É üîó', url: 'https://telegra.ph/ECHO-AI--FAQ-07-21' }],
          ]
        })
      };
      sendTextMessage(chatId, `üî∂ –í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã ‚§µÔ∏è`, faqKeyboard);
      break;
    case 'üìà –¢—Ä–µ–π–¥–∏–Ω–≥':
      const settingsImg = './assets/settings.png';
      const settingsMessage = `\n\n–¢—Ä–µ–π–¥–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å: ${user.status === true ? '<strong> –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ</strong>' : '<strong> –ù–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚ùå</strong>'}\n\n`;
      const settingsKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: '‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å | –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å ‚ùå', callback_data: 'activate' }],
            [{ text: 'üí´ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üí´', callback_data: 'statistics' }],
          ]
        })
      };
      sendMessageWithImage(chatId, settingsMessage, settingsImg, settingsKeyboard);
      break;
    case 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥':
      const promoImg = './assets/promocode.png';
      const promoMessage = `üî∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/promocode [–ø—Ä–æ–º–æ–∫–æ–¥]</code> —á—Ç–æ-–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.`;
      sendMessageWithImage(chatId, promoMessage, promoImg);
    case 'üì¢ –ù–∞—à –∫–∞–Ω–∞–ª':
      const channelKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'üîó –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª üîó', url: 'https://t.me/echoai_news' }],
          ]
        })
      }
      const channelMessage = '‚ùóÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –±–æ—Ç–æ–º –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ ‚§µÔ∏è'
      sendTextMessage(chatId, channelMessage, channelKeyboard);
      break;
    case 'üÜò –¢–µ—Ö. –ü–æ–¥–¥–µ—Ä–∂–∫–∞':
      const supportKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'üîó –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç üîó', url: 'https://t.me/echoai_support' }],
          ]
        })
      }
      const supportMessage = '‚ùóÔ∏è –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—Ä–≥–æ–≤–ª–µ –±–æ—Ç–æ–º –∏ –Ω–æ–≤–æ—Å—Ç–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ ‚§µÔ∏è'
      sendTextMessage(chatId, supportMessage, supportKeyboard);
      break;
  }
});

// Callback query handler
bot.on('callback_query', async (query) => {
  const chatId = query.message.chat.id;
  const callbackData = query.data;
  const wallet = await getWallet(chatId);
  const user = await getUser(chatId);
  const historyData = await getHistory(chatId);

  switch (callbackData) {
    case 'referral':
      if (user) {
        const referralLink = `https://t.me/EchoTradeAI_bot?start=${user.referralCode}`;
        const referralMessage = `üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ üë•\n\n‚ùóÔ∏è –ü–æ–ª—É—á–∏—Ç–µ $5 –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–ø–æ–∑–∏—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n‚ùóÔ∏è –í–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n<code>${referralLink}</code>\n(–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å üëá)\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüë• –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <strong>${user.referrals.length}</strong>\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞ –Ω–∏—Ö: <strong>${user.referrals.length * 5} USDT</strong>`;
        sendTextMessage(chatId, referralMessage);
      } else {
        sendTextMessage(chatId, '–í—ã –¥–æ–ª–∂–Ω—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É.');
      }
      break;
    case 'deposit':
      const depositImg = './assets/deposit.png';
      const depositKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'üöÄ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å üöÄ', callback_data: 'checkDeposit' }],
          ]
        })
      };
      const depositMessage = `üí≤ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –≤–∞—à –±–∞–ª–∞–Ω—Å üí≤\n\n‚ùóÔ∏è –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞, –≤–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ USDT –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∏–∂–µ –∫–æ—à–µ–ª–µ–∫ (–∫–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10%).\n\n–ü–µ—Ä–µ–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n‚ùóÔ∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ‚Äî 20 USDT\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<strong>–ê–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT TRC-20:</strong>\n<code>${wallet.address}</code>\n(–ß—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫üëÜ)`;
      sendMessageWithImage(chatId, depositMessage, depositImg, depositKeyboard);
      break;
    case 'withdraw':
      const withdrawImg = './assets/withdraw.png';
      const withdrawKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'üöÄ –í—ã–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Ç—Å–≤–∞ üöÄ', callback_data: 'withdrawFunds' }],
          ]
        })
      };
      const withdrawMessage = `üí∏ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ üí∏\n\n‚ùóÔ∏è –î–ª—è –≤—ã–≤–æ–¥–∞ USDT –Ω–∞ –≤–∞—à –∫–æ—à–µ–ª–µ–∫ USDT TRC20 –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ (–∫–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 10%).\n\n–ü—Ä–æ—Ü–µ—Å—Å –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –∏ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 7 –¥–Ω–µ–π.\n\n–ü–æ–∫–∞ –∑–∞—è–≤–∫–∞ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è, —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É –±—É–¥–µ—Ç –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n‚ùóÔ∏è<strong>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ ‚Äî 20 USDT</strong>\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <strong>${user.balance} USDT</strong>`;
      sendMessageWithImage(chatId, withdrawMessage, withdrawImg, withdrawKeyboard);
      break;
    case 'balanceHistory':
      const historyImg = './assets/history.png';
      let historyMessage;
      const completedHistory = historyData.filter(history => history.status === 'completed')
      if (historyData.length !== 0) {
        historyMessage = `‚è≥ –ò—Å—Ç–æ—Ä–∏—è –∫–æ—à–µ–ª—å–∫–∞ ‚è≥\n\n${completedHistory.map(history => `üî∂ –î–∞—Ç–∞: <strong>${dayjs(history.createdAt).format('YYYY-MM-DD | HH:mm')}</strong>\nüí∏ –°—É–º–º–∞: <strong>${history.amount} USDT</strong>\nüöÄ<strong>${history.method === 'deposit' ? ' –î–µ–ø–æ–∑–∏—Ç' : ' –í—ã–≤–æ–¥'}</strong>\n\n`)}`
      } else {
        historyMessage = '‚ùå –ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏'
      }
      sendMessageWithImage(chatId, historyMessage, historyImg);
      break;
    case 'statistics':
      const statisticsMessage = `üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìâ\n\n–ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞?`;
      const statisticsKeyboard = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [{ text: 'üöÄ 24 —á–∞—Å–∞ üöÄ', callback_data: '24h' }],
            [{ text: 'üöÄ 7 –¥–Ω–µ–π üöÄ', callback_data: 'week' }],
            [{ text: 'üöÄ 1 –º–µ—Å—è—Ü üöÄ', callback_data: 'month' }],
          ]
        })
      };
      sendTextMessage(chatId, statisticsMessage, statisticsKeyboard);
      break;
    case 'withdrawFunds':
      const deposits = historyData.filter(history => history.method === 'deposit' && history.status === 'completed');
      let withdrawFundsMessage;
      if (user.balance > 0) {
        if (deposits.length === 0) {
          withdrawFundsMessage = '‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ <b>20 USDT</b> –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.';
        } else {
          withdrawFundsMessage = 'üí∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:';
          user.waitingForWithdrawAmount = true;
          await user.save();
        }
      } else {
        withdrawFundsMessage = '‚ùå <b>–í–∞—à –±–∞–ª–∞–Ω—Å —Ä–∞–≤–µ–Ω –Ω—É–ª—é.</b>';
      }
      sendTextMessage(chatId, withdrawFundsMessage);
      break;
    case 'checkDeposit':
      checkForDeposit(wallet.address);
      break;
    case '24h':
      const dayTransactions = await getTransactionsByPeriod('24 —á–∞—Å–∞');
      const dayStatsMessage = formatStatisticsMessage(dayTransactions, '24 —á–∞—Å–∞');
      sendTextMessage(chatId, dayStatsMessage);
      break;
    case 'week':
      const weekTransactions = await getTransactionsByPeriod('–Ω–µ–¥–µ–ª—è');
      const weekStatsMessage = formatStatisticsMessage(weekTransactions, '7 –¥–Ω–µ–π');
      sendTextMessage(chatId, weekStatsMessage);
      break;
    case 'month':
      const monthTransactions = await getTransactionsByPeriod('–º–µ—Å—è—Ü');
      const monthStatsMessage = formatStatisticsMessage(monthTransactions, '1 –º–µ—Å—è—Ü');
      sendTextMessage(chatId, monthStatsMessage);
      break;
    case 'activate':
      if (user) {
        // Toggle user status
        user.status = !user.status;
        await user.save();

        // Delete the previous message from the bot
        try {
          await bot.deleteMessage(chatId, query.message.message_id);
        } catch (err) {
          console.error('Error deleting message:', err);
        }

        // Notify user about the status change
        const newStatusMessage = `–¢—Ä–µ–π–¥–∏–Ω–≥ –±–æ—Ç ${user.status ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚úÖ' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚ùå'}`;
        sendTextMessage(chatId, newStatusMessage);
      }
      break;
  }

  // Answer the callback query
  await bot.answerCallbackQuery(query.id, {
    show_alert: false
  });
});

// Check and execute a new transaction
async function checkAndExecuteTransaction(initialBTCPrice) {
  const successProbability = 0.65;
  const isSuccessful = Math.random() < successProbability;
  const btcCurrentPrice = await getBTCPrice();
  const direction = btcCurrentPrice >= initialBTCPrice ? 'up' : 'down';
  const priceChangePercentage = ((btcCurrentPrice - initialBTCPrice) / initialBTCPrice) * 100;
  const profitOrLossPercentage = isSuccessful ? Math.abs(priceChangePercentage).toFixed(2) : (-Math.abs(priceChangePercentage)).toFixed(2);
  const status = isSuccessful ? 'success' : 'fail';
  await createDealTransaction(profitOrLossPercentage, status, direction);
  return { status, profitOrLossPercentage, btcCurrentPrice };
}

// Create a new deal transaction
async function createDealTransaction(profit, status, direction) {
  const transaction = new Transaction({
    profit,
    type: direction,
    status,
  });
  await transaction.save();
}

// Generate new transactions
async function newTransaction() {
  const users = await getUsersWithBalanceGreaterThan(5);
  const btcPrice = await getBTCPrice();

  for (const userId of users) {
    const user = await getUser(userId.telegramId);
    if (user && user.status === true) {
      const openImg = './assets/open.png';
      const message = `‚è≥ –ë–æ—Ç –æ—Ç–∫—Ä—ã–ª –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É ‚è≥\n\nüöÄ –ü–∞—Ä–∞: <strong>BTC/USDT</strong>\n\nüî∑ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <strong>${btcPrice}</strong>`;
      await sendMessageWithImage(user.telegramId, message, openImg);
    }
  }

  await waitRandomTime(5, 10);
  const { status, profitOrLossPercentage, btcCurrentPrice } = await checkAndExecuteTransaction(btcPrice);

  for (const userId of users) {
    const user = await getUser(userId.telegramId);
    if (user && user.status === true) {
      const successImg = './assets/success.png';
      const failureImg = './assets/failure.png';
      let message;
      if (status === 'success') {
        message = `‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è —É—Å–ø–µ—à–Ω—ã–º!\n\nüöÄ –ü–∞—Ä–∞: <strong>BTC/USDT</strong>\n\nüî∑ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <strong>${btcCurrentPrice}</strong>\n\nüí∏ –ü—Ä–∏–±—ã–ª—å –æ—Ç —Å–¥–µ–ª–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∞: ${profitOrLossPercentage}%`;
      } else {
        message = `‚ùå –ü—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ—É–¥–∞—á–Ω—ã–º.\n\nüöÄ –ü–∞—Ä–∞: <strong>BTC/USDT</strong>\n\nüî∑ –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <strong>${btcCurrentPrice}</strong>\n\nüí• –£–±—ã—Ç–æ–∫ –æ—Ç —Å–¥–µ–ª–∫–∏ —Å–æ—Å—Ç–∞–≤–∏–ª: ${profitOrLossPercentage}%`;
      }
      await sendMessageWithImage(user.telegramId, message, status === 'success' ? successImg : failureImg);
      const profitOrLossMultiplier = 1 + (profitOrLossPercentage / 100);
      const newBalance = user.balance * profitOrLossMultiplier;
      await updateUserBalance(userId.telegramId, newBalance);
    }
  }

  await waitRandomTime(1, 5);
  newTransaction();
}

// Format statistics message
const formatStatisticsMessage = (transactions, period) => {
  const totalDeals = transactions.length;
  const successfulDeals = transactions.filter(t => t.status === 'success').length;
  const unsuccessfulDeals = transactions.filter(t => t.status === 'fail').length;
  const profitPercentage = calculateProfitPercentage(transactions);

  return `üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥: ${period}\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\nüöÄ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalDeals}\n‚úÖ –£—Å–ø–µ—à–Ω—ã–µ: ${successfulDeals}\nüö´ –ù–µ—É—Å–ø–µ—à–Ω—ã–µ: ${unsuccessfulDeals}\nüí∞ –ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: ${profitPercentage.toFixed(2)} %`;
};

// Calculate total profit percentage
const calculateProfitPercentage = (transactions) => {
  let totalProfit = 0;
  transactions.forEach(t => {
    totalProfit += t.profit;
  });
  return totalProfit;
};

const startDepositCheck = () => {
  setInterval(checkForDeposits, 5 * 60 * 1000);
}

// startDepositCheck();
// newTransaction();